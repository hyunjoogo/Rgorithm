'''
1. 문제가 해결되는 과정을 머릿 속에 그려보고 비슷한 작업이 반복되는 것을 발견한다.
2. 한 작업과 이어지는 작업이 어떤 유사성을 갖는지 파악한다.
3. 유사성을 파악했다면 그 작업의 '끝'으로 간다.
4. 사건들의 끝에서 작업할 내용과 반환할 내용을 생각하여 재귀 호출을 끝낸다.
5. 다시 앞으로 가서, 각 작업들에서 작업할 내용과 다음 작업에 넘겨줄 내용을 생각하여 재귀적으로 호출한다.

'''

def recusion(n) :
  if(n == 0) : return 0
  if(n == 1) : return 1
  return recusion(n-1) + recusion(n-2)

print(recusion(5))

# n번째 피보나치 수를 출력
'''
  4번째 구해라.
  dp(4) = dp(3) + dp(2)
        = dp(2) + dp(1) + dp(1) + dp(0)
'''
